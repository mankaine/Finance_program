# Finance_model module. Implements what kinds of and how information is stored and analyzed.
# By William Khaine. Version 3.
# June 11, 2016

# Transactions is a class that stores and analyzes the individual Transactions.

class Transactions:
    def __init__(self):
        '''Initalizes the Transactions class. Creates an empty list
        '''
        self.trnsctns= []
    
    def category_sub_total(self, filt: str) -> float:
        '''Returns the sum of Transactions whose category is the parameter filt
        '''
        subtotal = 0
        for trnsctn in self.trnsctns:
            if trnsctn.category.cat == filt:
                subtotal += trnsctn.price.price
        return subtotal
    
    def total(self) -> float:
        total = 0
        for trnsctn in self.trnsctns:
            total += trnsctn.price.price
        return total
    
# Each entry put into the Finance Program is itself a class, named Transaction. 

class Transaction:
    def __init__(self, date: 'Date', category: 'Category', 
                 description: 'Description', price: 'Price'):
        '''Initializes the Transaction class. It will implement the various classes which contains 
        its attributes.
        '''
        self.date = date
        self.category = category
        self.description = description
        self.price = price

# Transaction will contain a series of classes, each representing an attribute of each entry. 
# This includes the date, category, description, and amount.

import datetime

class Date:
    def __init__(self, yr: int, mnth: int, dy: int):
        '''Initializes the Date class. Creates a new date.
        '''
        try:
            self.year = (yr)
            self.month = (mnth)
            self.day = (dy)
        except ValueError:
            print('NO DATE RECORDED - INFORMATION INVALID')
            self.date = datetime.date(1, 1, 1)
        else:
            self.date = datetime.date(self.year, self.month, self.day)
        
    def change_date (self):
        revising_date = True
        while revising_date:
            
            yr = input('Year: ')
            mnth = input('Month: ')
            dy = input('Date: ')
            
            try:
                self.year = int(yr)
                self.month = int(mnth)
                self.day = int(dy)
            except ValueError:
                print('NO DATE RECORDED - INFORMATION INVALID')
            else:
                self.date = datetime.date(self.year, self.month, self.day)
                revising_date = False
            

class Category:
    def __init__(self, cat: str):
        '''Intalizes the Category class. Creates an empty list and a new category.
        '''
        self.cat = cat
        
    def change_cat(self, new_cat: str):
        self.cat = input('Category: ')

                
class Description:
    def __init__(self, desc: str):
        '''Initializes the Description class, containing the description of one transaction.
        '''
        self.desc = desc
        
    def change_desc(self):
        self.desc = input('Description: ') 


class Price:
    def __init__ (self, currency: str, price: float):
        '''Initializes the Price class, containing the price and currency in symbol form
        '''
        self.price = price
        self.crncy = currency
        
    def change_price(self):
        revising_price = True
        while revising_price:
            
            try:
                new_price = float(input('Price: '))
            except:
                print('NO PRICE RECORDED - INFORMATION INVALID')  
            else:
                self.price = new_price
                revising_price = False
        
