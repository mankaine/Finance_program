# Finance_view module. Implements the Finance Program graphical user interface.
# By William Khaine. Version 3.
# June 11, 2016

import finance_model
import math 

# _create_trasnaction enables a user to input information about the a Transaction,
# and processes that information. It will be repeated in _create_transactions. In the 
# case when an error in input is made, the int 0 is returned, which will be processed in
# _create_transactions as a sign that the loop needs to be repeated.


# revise code to implement revisions

def _create_transaction() -> finance_model.Transaction:
    '''Creates a Transaction
    '''
    print(('*' * 27) + 'Entering New Transaction' + ('*' * 27))
    
    try:
        year  = int(input('Year: ').strip())
        if 1 > year or year > 9999:
            raise ValueError()
        
        month = int(input('Month: ').strip())
        if 1 > month or month > 12:
            raise ValueError()
       
        day   = int(input('Date: ').strip())
        if 1 > day or day > 31:
            raise ValueError()
        
        cate = input('Category: ')
        desc = input('Description: ')
        
        price = float(input('Price: '))    
        
        return finance_model.Transaction(finance_model.Date(year, month, day),
                                         finance_model.Category(cate),
                                         finance_model.Description(desc),
                                         finance_model.Price('$', price))
    except:
        return 0


# _create_transactions runs a loop that enables the user to input a series of 
# Transactions. The process to input information ends when 
# _ask_to_continue_entry's value is False.
def _create_transactions(transactions: list):
    '''Creates a list of transactions, which the user is allowed to append
    '''
    _entering_transaction_list = True
    while _entering_transaction_list:
                
        new_transaction = _create_transaction()
        entering_new_transaction = True
        
        while entering_new_transaction:
            # if new_transaction.date.date == finance_model.datetime.date(1, 1, 1):
            if new_transaction == 0:
                print()
                new_transaction = _create_transaction()
            
            else:
                transactions.trnsctns.append(new_transaction)
                entering_new_transaction = False
                print()
        
        _entering_transaction_list = _ask_to_continue_entry('More transactions? ')
        print()
        

def _ask_to_continue_entry(question: str) -> bool:
    '''Returns true if the user enters an answer saying that he or she wishes 
    to continue
    '''
    user_wants_continuation = False
    response = input(question).lower()
    if response == 'yes' or response == 'y':
        user_wants_continuation = True
    return user_wants_continuation
    

# For the sake of style, the first transaction in the list of the transactions
# contains a sign of the currency in the list of transactions. It will print the
# currency sign before the price. Otherwise, it is the same as _format_transactions,
# which will format the transactions that will be exported to a .txt document and 
# printed to the console.
#
# Both these functions will be implemented into _export_all_information 
# and _view_all_transactions.
def _format_first_transaction(transaction: 'Transaction') -> str:
    '''Returns a formatted string representing a the first transaction's various
    attributes
    '''
    return '{:%m/%d/%Y} {:30} {:30} {}{:>7.2f}\n'.format(transaction.date.date,
                                                         transaction.category.cat,
                                                         transaction.description.desc,
                                                         transaction.price.crncy,
                                                         transaction.price.price)


def _format_transactions(transaction: finance_model.Transaction) -> str:
    '''Returns a formatted string representing a transaction's various attributes
    '''
    return '{:%m/%d/%Y} {:30} {:30} {:>8.2f}\n'.format(transaction.date.date,
                                                        transaction.category.cat,
                                                        transaction.description.desc,
                                                        transaction.price.price)    
    
    
def _format_subtotal(transactions: finance_model.Transactions) -> str:
    '''Returns a formatted string representing the subtotal of the transactions' prices
    '''
    return 'Total  {} {}{:>7.2f}'.format(('*'*(30 + 30 + 10 - len('Total'))),
                                        transactions.trnsctns[0].price.crncy, 
                                        transactions.total())    
        
# _format_document_title and _format_attributes return values which will be put at the 
# top of an exported .txt document and printed in the console. Both are caed in 
# _export_all_information and _view_all_information as a result.    
def _format_document_title(title: str):
    '''Returns a formatted string represented a formatted title
    '''
    star_length = math.floor((84 - len(title))/2)
    return '{}{}{}\n'.format('*' * star_length, title, '*' * star_length)


def _format_attributes():
    '''Returns a formatted string representing the attributes of a Transaction
    '''
    return '{:10} {:30} {:30} {:10}\n'.format('Date', 'Category', 'Description', 'Price')


# Both _export_all_information and _view_all_transactions are called in the function
# run_user_interface.
def _export_all_information(filename: str, transactions: finance_model.Transactions, 
                            title: str):
    '''Exports all information to a document
    '''
    file_to_export = open(filename, 'w')
    try:
        
        file_to_export.write(_format_document_title(title))
        file_to_export.write(_format_attributes())
        
        for transaction in transactions.trnsctns:
            if transactions.trnsctns[0] == transaction:
                file_to_export.write(_format_first_transaction(transaction))
            else:
                file_to_export.write(_format_transactions(transaction))
        file_to_export.write(_format_subtotal(transactions))
    finally:
        file_to_export.close()


def _view_all_transactions(filename: str, transactions: finance_model.Transactions, 
                           title: str):
    '''Prints on the console the name of the file all information will be exported to, and 
    the transactions
    '''
    print("The following will be exported to the file {}".format(filename))
    print()
    print(_format_document_title(title))
    print(_format_attributes())
    for transaction in transactions.trnsctns:
        if transactions.trnsctns[0] == transaction:
            print(_format_first_transaction(transaction))
        else:
            print(_format_transactions(transaction))
    print(_format_subtotal(transactions))
    print()


# A user may have typed in inaccurate information. _edit_transaction allows the user to 
# revise one single transaction's attribute at a time, and will continue to ask the user 
# to revise until he or she decides not to. In order to choose which attribute to revise, the 
# function calls two other functions, _select_transaction_to_edit, and _edit_transaction_attribute.
# The former returns a the transaction to edit, which is passed as the parameter in
# _edit_transaction_attribute.

def _edit_transactions(transactions: finance_model.Transactions) -> finance_model.Transactions:
    '''Displays transactions, and edits a particular one
    '''
    editing_transactions = True
    while editing_transactions:
    
        print('{}  {}'.format((' ' * len(transactions.trnsctns)), _format_attributes()))
        for trnsctn_ind in range(len(transactions.trnsctns)):
            if transactions.trnsctns[trnsctn_ind] == transactions.trnsctns[0]:
                print(trnsctn_ind + 1, _format_first_transaction(transactions.trnsctns[trnsctn_ind]))
            else:
                print(trnsctn_ind + 1 + '.', _format_transactions(transactions.trnsctns[trnsctn_ind]))
        print()
        
        _typo_transaction = _select_transaction_to_edit(transactions)
        _edit_transaction_attribute(_typo_transaction)
        
        print(('*' * 30) + 'Edited Transaction' + ('*' * 30))
        print(_format_first_transaction(_typo_transaction))
        
        editing_transactions = _ask_to_continue_entry('Continue editing transactions? ')


def _select_transaction_to_edit(transactions: finance_model.Transactions) -> finance_model.Transaction:
    '''Returns the selected Transaction
    '''
    checking_for_number = True
    while checking_for_number:
        try:
            num_choice = (input('Type in the number of the transaction you wish to edit: '))
            if 1 <= int(num_choice) <= len(transactions.trnsctns):
                checking_for_number = False
                return transactions.trnsctns[int(num_choice) - 1]
            else:
                print('{} is outside of list number from 1 to {}. Try again'.format(num_choice, 
                                                                                    len(transactions.trnsctns)))
        except:
            print('{} is outside of the list number from 1 to {}. Try again'.format(num_choice,
                                                                                    len(transactions.trnsctns)))


def _edit_transaction_attribute(transaction: finance_model.Transaction):
    '''Edits the transaction specified in the parameter
    '''
    checking_for_attribute = True
    while checking_for_attribute:
        
#         try:
        attrib_choice = input('Select attribute you wish to revise: ').strip().lower()
        print()
        if attrib_choice == 'date':
            transaction.date.change_date()
            checking_for_attribute = False
        
        elif attrib_choice == 'category':
            transaction.category.change_cat()
            checking_for_attribute = False
        
        elif attrib_choice == 'description':
            transaction.description.change_desc()
            checking_for_attribute = False

        elif attrib_choice == 'price':
            transaction.price.change_price()
            checking_for_attribute = False

#         except:
#             print('{} is not in the list of attributes. Try again'.format(attrib_choice))



def run_user_interface(transactions: finance_model.Transactions):
    '''Exports list of Transactions to a document
    '''
    _title = input('Title of List of Transactions: ')
    _filename = input('File name to export documents to: ')
    print()
    
    _create_transactions(transactions)
    _view_all_transactions(_filename, transactions, _title)
    
    okay_to_export = _ask_to_continue_entry('Export? ') 
    while okay_to_export == False:
        _edit_transactions(transactions)
        okay_to_export = _ask_to_continue_entry('Export? ') 
        
    if okay_to_export:
        _export_all_information(_filename, transactions, _title)
        
        
if __name__ == '__main__':
    transactions = finance_model.Transactions()
    run_user_interface(transactions)
