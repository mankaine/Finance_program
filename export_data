# export_data.py 
# by mankaine
# September 12, 2016

# Executed with the close of the program. Exports all data to a txt file 
# with the information regarding Accounts and CashFlows.

from cashflow import CashFlow, CashFlows
from install_data import FILE_NAME

# OUTERDIV and INNERDIV are bufferzones that the importer picks up 
# when Finance Program is initialized. They separate types of data from each 
# other, and are placed outside of CashFlows data or inside CashFlows data.
IMPORT_LOCATION = FILE_NAME
OUTERDIV = 'CFSOx'
INNERDIV = "SPLTHR"


# Executed in main_menu.py when user quits. Calls on _cfs_str and 
# _net_str.
def main (inflows: CashFlows, outflows: CashFlows) -> None:
    '''Combines CashFlow information into one string, then exports it
    '''
    in_cfs_str = _cfs_str(inflows.cfs)
    in_net_str = _net_str(inflows.total)
    out_cfs_str = _cfs_str(outflows.cfs)
    out_net_str = _net_str(outflows.total)
    export_str = in_cfs_str + in_net_str + out_cfs_str + out_net_str
    
    export_file = open(FILE_NAME, "w")
    try:
        export_file.write(export_str)
    except Exception as e:
        print("This happened:{}. Nothing was saved.\n\ngg\n".format(e))
    else:
        print("Your session has been saved.")
    finally:
        export_file.close()
    


# Called by main. Calls on _cf_str for each individual function, and passes 
# the value returned to in_cfs_str and out_cfs_str. To ensure use of commas
# separating lists and dictionaries from each other, a meter is placed at the 
# end of each loop that iterates downwards from the length of the dictionary/
# list minus 1 until the meter reaches 0 (i.e. the last in the data structure).
def _cfs_str (transxs: 'CashFlows.cfs') -> str:
    '''Returns the string necessary for initializer to consider a CashFlows's
    cfs attribute
    '''
    export_str = OUTERDIV + INNERDIV + '{'
    year_num = len(transxs) - 1

    # Year Level    
    for year in transxs:
        export_str += (str(year) + ": {")
        
        # Month Level
        month_num = len(transxs[year]) - 1
        for month in transxs[year]:
            export_str += (str(month) + ": [")
            
            # Transaction Level
            cf_num = len(transxs[year][month]) - 1
            for cf in transxs[year][month]:
                export_str += _cf_str(cf)
                if cf_num > 0:
                    export_str += ','
                cf_num -= 1
            
            export_str += ']'
            if month_num > 0:
                export_str += ','
            month_num -= 1
            
        export_str += '}'
        if year_num > 0:
            export_str += ','
        year_num -= 1
        
    export_str += '}'
    return export_str
    

# Returns one transaction as a string, and formatted as a dictionary.
def _cf_str(transx: CashFlow) -> str:
    '''Returns the string necessary for initializer to consider a CashFlow 
    object
    '''
    timeframe = '"year":{},"month":{},"day":{},'.format(
        transx.year, transx.month, transx.day)
    desc_and_acct = '"acct_name":"{}","desc":"{}","is_sav":{},'.format(
        transx.acct_name, transx.desc, transx.is_sav)
    curr_and_price = '"currency":"{}","price":{}'.format(
        transx.currency, transx.price)
    return '{' + timeframe + desc_and_acct + curr_and_price + '}'
    

# Called by main. Returns a formatted string representing the total amount 
# of the CashFlows' transactions.
def _net_str (total: 'CashFlows.total') -> str:
    '''Returns the string necessary for initializer to consider a net total
    of a CashFlows object 
    '''
    return "{}{:.2f}".format(INNERDIV, total)
